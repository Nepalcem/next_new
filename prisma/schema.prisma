// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  name          String?
  role          String? @default("user")
  password      String?
  image         String?
  emailVerified DateTime?
  sold_services sold_services[]
  ctr           ctr[]
  accounts      Account[]
  sessions      Session[]
}

model sold_services {
  id          Int      @id @default(autoincrement())
  date        DateTime
  source      String?
  Order_id    String?
  price       Float?
  description String?
  status      String?
  comments    String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model ctr {
  id          Int      @id @default(autoincrement())
  date        DateTime
  source      String?
  time_spent  Int?     @default(30)
  description String?
  comments    String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model Account {
  id                 String   @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}